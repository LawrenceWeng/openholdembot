##OpenPPL_License_Text##
//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for OpenPPL.
//   These functions will be loaded by OpenHoldem in the background
//   and will be available both for OpenPPL and OH-script users.
//   This library is mostly written in OH-script,
//   but it can be extended by OpenPPL-functions, as both formats are 100% compatible.
//
// OpenPPL is part of the OpenHoldem project
//   Source code:           http://code.google.com/p/openholdembot/
//   Download page:         https://sites.google.com/site/openholdempokerbot/downloads
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 7.0.2 or later
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Fqfq	
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Relhby
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes - supporting technical functions
//
//*****************************************************************************

##BigBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(BigBlindChair == 0) ? (currentbet0 / bet) :
(BigBlindChair == 1) ? (currentbet1 / bet) :
(BigBlindChair == 2) ? (currentbet2 / bet) :
(BigBlindChair == 3) ? (currentbet3 / bet) :
(BigBlindChair == 4) ? (currentbet4 / bet) :
(BigBlindChair == 5) ? (currentbet5 / bet) :
(BigBlindChair == 6) ? (currentbet6 / bet) :
(BigBlindChair == 7) ? (currentbet7 / bet) :
(BigBlindChair == 8) ? (currentbet8 / bet) :
(BigBlindChair == 9) ? (currentbet9 / bet) :
ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##SmallBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(SmallBlindChair == 0) ? (currentbet0 / bet) :
(SmallBlindChair == 1) ? (currentbet1 / bet) :
(SmallBlindChair == 2) ? (currentbet2 / bet) :
(SmallBlindChair == 3) ? (currentbet3 / bet) :
(SmallBlindChair == 4) ? (currentbet4 / bet) :
(SmallBlindChair == 5) ? (currentbet5 / bet) :
(SmallBlindChair == 6) ? (currentbet6 / bet) :
(SmallBlindChair == 7) ? (currentbet7 / bet) :
(SmallBlindChair == 8) ? (currentbet8 / bet) :
(SmallBlindChair == 9) ? (currentbet9 / bet) :
ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##DollarsToCallForMisScrapedEverything##
// My balance and opponents bet miss-scraped
// For NL and Pl assume a min-raise which must be about as much as my bet
// The ability to check got already excluded
(isnl OR ispl) ? currentbet : bet

##DollarsToCallForMisScrapedUserBalance##
// My balance miss-scraped as 0
(call > 0) ? call : DollarsToCallForMisScrapedEverything

##DollarsToCallForMisScrapedOpponentBet##
// Opponents bet must be miss-scraped
// Incorrect amount to call despite I already acted.
// Lets assume a min-raise, which must be at least as much as my bet (NL / PL)
isfl ? bet : currentbet

##DollarsToCall##
// Effective DollarsToCall could go wrong, if our balance got miss-scraped
// (Our balance must be always > 0 if it is our turn)
// Therefore we create multiple functions for multiple cases of bad input.
(ismyturn AND balance <= 0) ? DollarsToCallForMisScrapedUserBalance :
// Preflop and I already did act in a raised pot, but nothing to call
((betround == ConstBetRoundPreflop) AND (ncurrentbets >= 1.01) AND (call <= 0)) ? DollarsToCallForMisScrapedOpponentBet :
// Preflop and I am not big-blind and there is nothing to call
((betround == ConstBetRoundPreflop) AND (ncurrentbets < 1) AND (call <= 0)) ? DollarsToCallForMisScrapedOpponentBet :
// Postflop and I already did act, but nothing to call
((betround > ConstBetRoundPreflop) AND (ncurrentbets > 0) AND (call <= 0))  ? DollarsToCallForMisScrapedOpponentBet :
// The normal case (including correct and incorrect abilities to check)
(call <= balance) ? call : balance

##MaximumPossibleBetsizeIndollars##
(balance + currentbet)

##SidePotInDollars##
// Money in the side-pot, i.e. the money we don't compete for.
  [(currentbet0 > MaximumPossibleBetsizeIndollars) ? currentbet0 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet1 > MaximumPossibleBetsizeIndollars) ? currentbet1 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet2 > MaximumPossibleBetsizeIndollars) ? currentbet2 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet3 > MaximumPossibleBetsizeIndollars) ? currentbet3 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet4 > MaximumPossibleBetsizeIndollars) ? currentbet4 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet5 > MaximumPossibleBetsizeIndollars) ? currentbet5 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet6 > MaximumPossibleBetsizeIndollars) ? currentbet6 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet7 > MaximumPossibleBetsizeIndollars) ? currentbet7 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet8 > MaximumPossibleBetsizeIndollars) ? currentbet8 - MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet9 > MaximumPossibleBetsizeIndollars) ? currentbet9 - MaximumPossibleBetsizeIndollars : 0]

##SidePot##
// Money in the side-pot, i.e. the money we don't compete for (measured in big blinds)
(bblind > 0) ? (SidePotInDollars / bblind) : 0


